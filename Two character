Given a string, remove characters until the string is made up of any two alternating characters. When you choose a character to remove, all instances of that character must be removed. Determine the longest string possible that contains just two alternating letters.

Example
S='abaacdabd'

Delete a, to leave bcdbd. Now, remove the character c to leave the valid string bdbd with a length of 4. Removing either b or d at any point would not result in a valid string. Return .
Given a string , convert it to the longest possible string  made up only of alternating characters. Return the length of string . If no string  can be formed, return .

Function Description
Complete the alternate function in the editor below.
alternate has the following parameter(s):
>string s: a string

Returns.
int: the length of the longest valid string, or 0 if there are none

Input Format

The first line contains a single integer that denotes the length of s.
The second line contains string s.



CODE python 3


def alternate(s):
    max_pattern = 0
    
    if len(s) == 1:  
        return max_pattern
    
    for i in range(26):
        for j in range(i + 1, 26):
            one = chr(ord('a') + i)  
            two = chr(ord('a') + j)  
            last_seen = None
            pattern_length = 0
            
            for letter in s:
                if letter == one or letter == two:
                    if letter == last_seen: 
                        pattern_length = 0
                        break
                    
                    pattern_length += 1
                    last_seen = letter
            max_pattern = max(max_pattern, pattern_length)
    
    return max_pattern


if __name__ == '__main__':
    # Read input length (not used directly, kept for consistency)
    l = int(input().strip())
    s = input().strip()

    result = alternate(s)
    print(result)
